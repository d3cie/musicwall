import { useRouter } from 'next/router'
import * as vars from '../../../vars'
import { useState, useEffect, useContext } from 'react'
import styled from 'styled-components'
import React from 'react'
import ProfileBar from '../../../components/layouts/ProfileBar'
import Music from '../../../components/primitives/Icons/Music'
import Album from '../../../components/primitives/Icons/Album'
import Artist from '../../../components/primitives/Icons/Artist'
import Link from 'next/link'
import Song from '../../../components/compounds/Song'
import SongMobile from '../../../components/compounds/Song/SongMobile'
import Ellipsis from '../../../components/primitives/Animations/Elipsis'
import DualRing from '../../../components/primitives/Animations/DualRing'
import getuser from '../../../services/getuser'
import Error from 'next/error'
import Head from 'next/head'
import PlaySongSpotify from '../../../components/compounds/Song/PlaySongSpotify'
import AlbumMobile from '../../../components/compounds/Album/AlbumMobile'
import ArtistMobile from '../../../components/compounds/Artist/ArtistMobile'
import WallIcon from '../../../components/primitives/Icons/Wall'
import { LoginContext } from '../../../pages/_app'
import Wall from '../../../components/layouts/Wall'
import Plus from '../../../components/primitives/Icons/Plus'
import AddBio from '../../../components/layouts/Objectives/AddBio'
import AddPicture from '../../../components/layouts/Objectives/AddPicture'
import AddWall from '../../../components/layouts/Objectives/AddWall'
import getwalls from '../../../services/getwalls'


const Cont = styled.main`
  /* background-color:${vars.GREY}; */
  background-color: ${vars.LIGHT_GREY};
  /* min-height:100vh; */
  display: flex;
  flex-direction: column;
  width:100%;

  height:fit-content;`



export default function UserProfile() {
  const router = useRouter()
  const pathname = router.asPath
  const [data, setData] = useState(null)
  const [username, setUsername] = useState(null)
  const isLoggedInData = useContext(LoginContext)


  const [isloggedinaccount, setIsLoggedInAccount] = useState(false)

  async function pin(user) {
   

  }


  useEffect(() => {
    setUsername(window.location.pathname.substring(3))

    if (isLoggedInData?.username == username) {
      setIsLoggedInAccount(true)
    }
    async function fetchData() {
      const response = getuser(window.location.pathname.substring(3))
      setData(await response)
      // console.log()
      
    }
    fetchData()

  }, [username])


  if (!data) return <Cont

    style={{
      position: 'absolute',
      bottom: 0,
      left: 0,
      zIndex: 10,
      display: 'flex',
      flexDirection: 'column-reverse',
      color: vars.MAIN_WHITE,
      fontWeight: '200',
      width: '100%',
      height: '100vh',
      alignItems: 'center',
      justifyContent: 'center',
      transition: 'all 0.2s'
    }}

  ><Ellipsis color={vars.MAIN_WHITE} /></Cont>

  if (data.status != "success") {
    return <Error statusCode={404} />
  }

  return (
    <>
      <Head>
        <title>Music Wall page for @{username}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <meta name="color-scheme" content="light dark"></meta>
        <meta name="theme-color" content={vars.DARK_GREY} />
      </Head>

      <Cont>
        {/* <PlaySongSpotify/> */}
        <ProfileBar
          bio={data.profile.profileinfo.bio}
          profileimage={data.profile.profileinfo.profileimage}
          username={data.profile.username}
          countrycode={data.profile.profileinfo.countrycode}
          DisplayName={data.profile.profileinfo.displayname}
          isProf = {isloggedinaccount}
        />

        <Cont>
          <Wall walls = {data.profile?.walls} isloggedinaccount = {isloggedinaccount}/>
        </Cont>

      </Cont>
    </>

  )
}































{/* <CategoryCont>
        <Link href={`/u/${username}/songs`}>

          <Category className={(pathname == `/u/${username}/songs`) ? 'active' : 'normal'}>
            <Music />Songs
          </Category>
        </Link>

        <Link href={`/u/${username}/albums`} >
          <Category className={(pathname == `/u/${username}/albums`) ? 'active' : 'normal'}>
            <Album />Albums
          </Category>
        </Link>

        <Link href={`/u/${username}/artists`}>
          <Category className={(pathname == `/u/${username}/artists`) ? 'active' : 'normal'}>
            <Artist /> Artists
          </Category>
        </Link>
      </CategoryCont> */}